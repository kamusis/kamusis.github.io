{"meta":{"title":"Kamus' Notes","subtitle":"面朝大海，春暖花开","description":"","author":"Kamus","url":"http://kamusis.github.io","root":"/"},"pages":[{"title":"aboutme","date":"2024-05-27T08:06:25.000Z","updated":"2024-05-27T09:26:39.025Z","comments":true,"path":"about/index.html","permalink":"http://kamusis.github.io/about/index.html","excerpt":"","text":"2006年中回家省亲，恰逢大一新生入学， 家乡车站上挂着横幅迎接祖国各地到来的莘莘学子。 我拖着箱子走出车站， 迎接新生的同学看着我说－这位同学，你…… 大汗，我已经不做学生很多年了。 其实我没那么看上去那么小， 说实话我都该要到隐瞒年龄的阶段了。 闲话少说，以下为个人简历， 省略学习经历1500字…… 省略工作经历3000字…… 我，其实是一个DBA。 我，其实是一个Consultant。 2007年被提名为Oracle ACE，2011年被提名为Oracle ACE Director。 我是Oracle8i&#x2F;9i&#x2F;10g OCP，不是OCM，估计也永远不会去考OCM。 我是ACOUG成员，实际上也是ACOUG创办者以及管理者。 现在我在云和恩墨（北京）信息技术有限公司任战略市场 云服务事业部总经理 副总经理一职，仍然有不少时间从事技术工作。 可以通过以下途径联系我，但是，数据库问题最好能够在墨天轮DBASK上提问。 我的邮件地址： 我的Google Talk： 我的Linkedin： Also, you can find my resume in English(pdf) from here. 真人show，某天的手机自拍。 魔兽show，2005年，我在魔兽世界的第一个角色，盗贼日蚀，60级，持残忍利刃和血腥撕裂者，那时候血牙头还很土。那时候的WoW还很好玩。 2006年，盗贼日蚀，60级，持上古其拉撕裂者和伊普利斯.堕落炽天使之刃，仍然是血牙头。基本上是那个时期盗贼的顶级装备。那是玩的最疯的时候。 2007年，厌倦了40人上班式的RAID，从国服AFK，转战台服，亡灵术士，D3套，70级。实际上是一个人在台服玩，有一搭没一搭的。 2007年9月，国服开TBC，于是从台服AFK，回归国服，reroll了血精灵猎人，部分S2，70级。玩到2008年，也只是偶尔去打一下卡拉赞而已，高端副本基本没有进去过，AFK。 2008年11月，台服开放WLK巫妖王之怒。2008年底再次回到台服，2009年11月21日，防骑+奶骑，2T8.5+2T9，目前3.2版本，可坦25人十字军。80级。有一帮最早60级时在国服的朋友，倒也其乐融融。 闲暇时间里，把之前70级的术士升级到了80级。2009年11月21日，术士Neggo，2T8+2T9，80级。休闲小号，主城木桩DPS不到4000。 2010年6月27，时隔半年，术士Neggo，4T10。主城木桩DPS到5600。 2011年，台服魔兽世界已经升级到CTM大灾变，国服在经历了从2007年9月份一直到2010年8月整整三年的TBC之后极为艰难地开放了WLK巫妖王之怒，现在依旧杯具地落后全世界一整个版本（其间在大陆的代理商从九城易手到网易，也是风波迭起）。可惜无论是CTM还是WLK，自己对于这款游戏的热情已经降到历史最低点，仅仅把台服的圣骑号升级到85，打过几次5人副本，连5人H本都没有进过，更别提10人副本了。也许作为一款单机游戏，练练小号四处逛逛，也还不错。 2015年，魔兽世界10周年了，已经升级到6.0版本，我还在玩这个游戏，宠物对战、帐号共享坐骑、全新的要塞系统，人物等级提升到100级。我在台服。Reroll了死骑，叮到90级，然后练到100级，5H毕业。 2018年，魔兽世界升级到了8.0版本，嗯，我还在玩。从7.0版本的破碎群岛到7.3版本的阿古斯，脚男们干翻了基尔加丹，又传送到被蛋总折跃到艾泽拉斯旁边的阿古斯上去，进攻燃烧军团的老家，最后在万神殿的一大堆泰坦们的帮助下，推倒了萨格拉斯。萨格拉斯临了孤注一掷，一剑插进了艾泽拉斯，这大家伙在希利苏斯像一座山一样矗立着，而且还开始侵蚀艾泽拉斯之心。然后就开了8.0，部落和联盟在7.0里面合作的太久了，像一对好基友一样卿卿我我，然而部落新任大领主希尔瓦娜斯觉得这肯定不是个事儿，与其以后大家都有了艾泽里特发展出牛逼武器，然后斗个大家都死，不如现在就开打。于是，部落烧了泰达希尔，联盟围攻了幽暗城，开始了艾泽拉斯争霸。 回归国服，Reroll了德鲁伊，叮到110级，练到120级，秒上坐骑，还是挺爽的。为了部落！[ 整个8.0阶段并没有正经玩，时间很快来到2020年底，魔兽世界开了9.0暗影国度，由于之前经历了8个版本，无论是人物属性还是伤害数值已经呈现爆炸形式，因此9.0版本，暴雪对魔兽世界进行了等级压缩，8.0版本的满级120级人物在进入9.0之后会变成50级。9.0允许从50级开始再次升级到满级60级。 在9.0版本里，部落大酋长希尔瓦娜斯反复横跳，黑化又洗白，女王在8.0火烧泰达希尔之后，又在9.0喊出了“部落就是废物”。总之，剧情稀碎。但是有一说一，暗影界的美工是真不错，尤其是晋升堡垒，初进地图着实惊艳。 2023年1月24日，由于暴雪和网易的纠葛，在中国大陆运营了18年的魔兽世界正式关停，魔兽玩家哀鸿遍野。 再次转战台服，2023年11月29日，10.0版本巨龙时代正式上线。人物等级上限70级。 今年2024年，年底魔兽世界即将进入11.0 地心之战。而明年将会是魔兽世界20周年。"}],"posts":[{"title":"How to build blog site by using Hexo in Windows WSL and deploy to GitHub Pages","slug":"How-to-build-blog-site-by-using-Hexo-in-Windows-WSL-and-deploy-to-GitHub-Pages","date":"2024-05-27T07:10:17.000Z","updated":"2024-05-27T09:50:19.586Z","comments":true,"path":"2024/05/27/How-to-build-blog-site-by-using-Hexo-in-Windows-WSL-and-deploy-to-GitHub-Pages/","permalink":"http://kamusis.github.io/2024/05/27/How-to-build-blog-site-by-using-Hexo-in-Windows-WSL-and-deploy-to-GitHub-Pages/","excerpt":"","text":"Why use WSLUsing Windows Subsystem for Linux (WSL) instead of relying solely on Windows can offer several advantages, particularly for developers and IT professionals. WSL allows users to run a GNU&#x2F;Linux environment directly on Windows, without the overhead of a traditional virtual machine or dual-boot setup. This enables seamless access to a wide range of Linux tools and utilities, which are often preferred for development tasks, scripting, and system administration. Additionally, WSL provides a more consistent and familiar environment for those accustomed to Unix-based systems, facilitating smoother workflows and integration with cloud-based services. By leveraging WSL, professionals can enjoy the best of both worlds: the robust software ecosystem of Windows and the powerful command-line capabilities of Linux. Why use HexoHexo offers several advantages over WordPress, particularly for developers and tech-savvy users. As a static site generator, Hexo provides faster load times and improved security since it does not rely on a database or server-side processing, which are common vulnerabilities in WordPress. Additionally, Hexo allows for greater customization through its use of Markdown and extensive plugin ecosystem, enabling users to tailor their sites to specific needs without the overhead of a complex content management system. Furthermore, Hexo’s deployment process is streamlined, often integrating seamlessly with version control systems like Git, making it an excellent choice for those who prioritize efficiency and performance in their web development projects. Why use Github PagesUsing GitHub Pages instead of a traditional hosting server offers several distinct advantages. Firstly, GitHub Pages provides a seamless integration with GitHub repositories, enabling automatic deployment of websites directly from your codebase. This integration ensures that updates and changes to your site are effortlessly managed through version control, promoting a streamlined workflow. Additionally, GitHub Pages is cost-effective, offering free hosting with custom domain support, which can significantly reduce overhead costs for personal projects or small businesses. The platform also boasts robust security features, leveraging GitHub’s infrastructure to protect your site from common vulnerabilities. Furthermore, the simplicity and ease of use make GitHub Pages an attractive option for developers who want to focus on writing code rather than managing server configurations and maintenance. Overall, GitHub Pages combines efficiency, cost savings, and security, making it an excellent choice for hosting static websites and project documentation. GO!Assume already has a WSL environment runningIf not, refer to “How to install Linux on Windows with WSL“. To say we are running WSL distro - Ubuntu 22.04 12345678910111213$ cat /etc/os-releasePRETTY_NAME=&quot;Ubuntu 22.04.4 LTS&quot;NAME=&quot;Ubuntu&quot;VERSION_ID=&quot;22.04&quot;VERSION=&quot;22.04.4 LTS (Jammy Jellyfish)&quot;VERSION_CODENAME=jammyID=ubuntuID_LIKE=debianHOME_URL=&quot;https://www.ubuntu.com/&quot;SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;UBUNTU_CODENAME=jammy Install Node.jsSince Hexo is written by Node.js, nodejs must be installed. 12sudo apt updatesudo apt install nodejs npm Install GITSince Hexo uses Git to publish pages on GitHub, Git must be installed. 1sudo apt install git Install Hexo1sudo npm install -g hexo-cli Init Hexo projectOur goal is to deploy the static HTML file generated by Hexo to GitHub Pages. To achieve this, we need to create a repository named “[username].github.io” on GitHub. Therefore, we will initialize this directory directly using Hexo. Note: Be sure to replace [username] with your actual GitHub username. 1hexo init kamusis.github.io Create Github pagesCreating GitHub Pages is very simple, reference: https://pages.github.com/ Connecting to Github with SSHReference: https://docs.github.com/en/authentication/connecting-to-github-with-ssh Basically, generate a key using the ssh-keygen command and upload the public key to the GitHub. Once the SSH connection is established, use the following command to verify it: 12$ ssh -T git@github.comHi kamusis! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. Set URL for your new blog123456$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: http://kamusis.github.io Set Git information to let hexo can push contents into Github Pages12345678910$ npm install hexo-deployer-git --save$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: git@github.com:kamusis/kamusis.github.io.git branch: master Generate the site and push to Github pages12$ hexo clean$ hexo deploy Assuming everything has been set up correctly, you can now view a hello-world article on a website by navigating to https:&#x2F;&#x2F;[username].github.io. Write your articles and publish1hexo new &quot;My first post&quot; A markdown file will automatically be created and placed in the source&#x2F;_posts directory. It can then be edited and saved using your preferred text or markdown editor. Of course, you can also clean up the initial hello-world article. 1rm source/_posts/hello-world.md Publish the articles. 12$ hexo clean$ hexo deploy Reference: https://hexo.io/docs/github-pages#One-command-deployment https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://kamusis.github.io/tags/Hexo/"},{"name":"Github Pages","slug":"Github-Pages","permalink":"http://kamusis.github.io/tags/Github-Pages/"},{"name":"WSL","slug":"WSL","permalink":"http://kamusis.github.io/tags/WSL/"}]},{"title":"How to Find the Corresponding Session in MogDB/openGauss from OS Thread ID","slug":"How-to-Find-the-Corresponding-Session-in-MogDB-openGauss-from-OS-Thread-ID","date":"2024-05-27T06:55:48.000Z","updated":"2024-05-27T07:01:07.248Z","comments":true,"path":"2024/05/27/How-to-Find-the-Corresponding-Session-in-MogDB-openGauss-from-OS-Thread-ID/","permalink":"http://kamusis.github.io/2024/05/27/How-to-Find-the-Corresponding-Session-in-MogDB-openGauss-from-OS-Thread-ID/","excerpt":"","text":"Diagnostic NeedsWhen the MogDB database consumes a significant amount of system resources, such as nearly 100% CPU usage, how can we determine which session(s) in the database are using these resources? In Oracle databases, diagnosing such issues typically involves associating v$session, v$process, and the OS process ID found using the top or ps commands. However, MogDB uses a thread model, and only one process ID is visible at the OS level. So, how do we pinpoint the problem? Since MogDB uses a thread model, unlike PostgreSQL’s process model, checking network port access with the lsof command at the OS level will show multiple user sessions connected, but only the process ID will be displayed in the PID column, not the thread. 12345678910$ lsof -i 4 -a -p `pgrep -u omm3 mogdb`COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEmogdb 12027 omm3 8u IPv4 20313752 0t0 TCP *:biimenu (LISTEN)mogdb 12027 omm3 9u IPv4 20313753 0t0 TCP *:18001 (LISTEN)mogdb 12027 omm3 325u IPv4 28320946 0t0 TCP mogdb-kernel-0004:biimenu-&gt;softbank060132034173.bbtec.net:45206 (ESTABLISHED)mogdb 12027 omm3 330u IPv4 28316174 0t0 TCP mogdb-kernel-0004:biimenu-&gt;softbank060132034173.bbtec.net:45208 (ESTABLISHED)mogdb 12027 omm3 336u IPv4 28302815 0t0 TCP mogdb-kernel-0004:biimenu-&gt;softbank060132034173.bbtec.net:45210 (ESTABLISHED)mogdb 12027 omm3 340u IPv4 28323140 0t0 TCP mogdb-kernel-0004:biimenu-&gt;softbank060132034173.bbtec.net:45212 (ESTABLISHED)mogdb 12027 omm3 360u IPv4 28323141 0t0 TCP mogdb-kernel-0004:biimenu-&gt;softbank060132034173.bbtec.net:45214 (ESTABLISHED)mogdb 12027 omm3 375u IPv4 28305050 0t0 TCP mogdb-kernel-0004:biimenu-&gt;softbank060132034173.bbtec.net:45216 (ESTABLISHED) How to Get Thread IDYou can use htop. After opening htop, press F5 to display the process tree. The first PID is the process ID, and each line under the tree structure shows the corresponding thread ID for that process. You can also use the ps command. The -L parameter displays threads, and the -o parameter specifies the columns of interest. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# ps -Lp `pgrep -u omm3 mogdb` -o %cpu,tid,pid,ppid,cmd,comm%CPU TID PID PPID CMD COMMAND 0.0 17847 17847 1 /opt/mogdb3/app/bin/mogdb - mogdb 0.0 17848 17847 1 /opt/mogdb3/app/bin/mogdb - jemalloc_bg_thd 0.0 17854 17847 1 /opt/mogdb3/app/bin/mogdb - mogdb 0.0 17855 17847 1 /opt/mogdb3/app/bin/mogdb - syslogger 0.0 17856 17847 1 /opt/mogdb3/app/bin/mogdb - reaper 0.0 17857 17847 1 /opt/mogdb3/app/bin/mogdb - jemalloc_bg_thd 0.0 17858 17847 1 /opt/mogdb3/app/bin/mogdb - jemalloc_bg_thd 0.0 17860 17847 1 /opt/mogdb3/app/bin/mogdb - jemalloc_bg_thd 0.0 17884 17847 1 /opt/mogdb3/app/bin/mogdb - checkpointer 0.0 17885 17847 1 /opt/mogdb3/app/bin/mogdb - Spbgwriter 0.1 17886 17847 1 /opt/mogdb3/app/bin/mogdb - pagewriter 0.0 17887 17847 1 /opt/mogdb3/app/bin/mogdb - pagewriter 0.0 17888 17847 1 /opt/mogdb3/app/bin/mogdb - pagewriter 0.0 17889 17847 1 /opt/mogdb3/app/bin/mogdb - pagewriter 0.0 17890 17847 1 /opt/mogdb3/app/bin/mogdb - pagewriter 0.8 17891 17847 1 /opt/mogdb3/app/bin/mogdb - WALwriter 0.0 17892 17847 1 /opt/mogdb3/app/bin/mogdb - WALwriteraux 0.0 17893 17847 1 /opt/mogdb3/app/bin/mogdb - AVClauncher 0.0 17894 17847 1 /opt/mogdb3/app/bin/mogdb - Jobscheduler 0.0 17895 17847 1 /opt/mogdb3/app/bin/mogdb - asyncundolaunch 0.0 17896 17847 1 /opt/mogdb3/app/bin/mogdb - globalstats 0.0 17897 17847 1 /opt/mogdb3/app/bin/mogdb - applylauncher 0.0 17898 17847 1 /opt/mogdb3/app/bin/mogdb - statscollector 0.0 17899 17847 1 /opt/mogdb3/app/bin/mogdb - snapshotworker 0.1 17900 17847 1 /opt/mogdb3/app/bin/mogdb - TrackStmtWorker 0.0 17901 17847 1 /opt/mogdb3/app/bin/mogdb - 2pccleaner 0.0 17902 17847 1 /opt/mogdb3/app/bin/mogdb - faultmonitor 0.0 17904 17847 1 /opt/mogdb3/app/bin/mogdb - undorecycler 0.0 18372 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18373 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18374 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18375 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18376 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18377 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18378 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18379 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18380 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18381 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18382 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 18454 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 19475 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 19480 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 29529 17847 1 /opt/mogdb3/app/bin/mogdb - worker 0.0 30999 17847 1 /opt/mogdb3/app/bin/mogdb - worker The rows in the comm column that display as “worker” are backend processes of user sessions in the database. Typically, user sessions that consume high CPU can be filtered to show only user sessions using the grep command. How to Map OS Thread ID to Database SessionSuppose on this server, the thread with ID 18372 is consuming a lot of CPU. In MogDB, you can query the pg_os_threads view to find the session ID corresponding to this thread. 123456MogDB=# select * from pg_os_threads where lwpid=18372;node_name | pid | lwpid | thread_name | creation_time----------+------------------+-------+-------------+------------------------------dn_6001 | 140545137571584 | 18372 | dn_6001 | 2022-05-30 19:54:42.459129+08(1 row) The pg_os_threads view records the relationship between lightweight thread IDs and session IDs. The lwpid column is the OS thread ID, and the pid column is the database session ID. For detailed information, refer to the MogDB documentation on PG_OS_THREADS. If you have monadmin privileges, you can also query the os_threads view in the dbe_perf schema, which provides the same information. After finding the database session ID, you can perform various actions, such as querying the dbe_perf.session_stat_activity view to get the application name, client IP address, and the SQL query being executed by that session. 123456MogDB=# select application_name, client_addr, query from dbe_perf.session_stat_activity where pid=140545137571584;application_name | client_addr | query-----------------+-------------+---------------------------------------------dn_6001 | 172.16.0.176| SELECT cfg_value FROM bmsql_config WHERE cfg_name = $1(1 row) You can also query the dbe_perf.thread_wait_status view to get the current wait event of the session. Note that this view contains the lwtid field, which directly corresponds to the thread ID. 123456MogDB=# select lwtid, wait_status, wait_event from dbe_perf.thread_wait_status where sessionid=140545137571584;lwtid | wait_status | wait_event------+-------------+-----------18372 | wait cmd | wait cmd(1 row)","categories":[],"tags":[{"name":"MogDB","slug":"MogDB","permalink":"http://kamusis.github.io/tags/MogDB/"}]},{"title":"MogDB ASH: Unveiling the Active Session History for Powerful Database Performance Tuning","slug":"MogDB-ASH-Unveiling-the-Active-Session-History-for-Powerful-Database-Performance-Tuning","date":"2024-05-27T06:48:34.000Z","updated":"2024-05-27T07:01:32.325Z","comments":true,"path":"2024/05/27/MogDB-ASH-Unveiling-the-Active-Session-History-for-Powerful-Database-Performance-Tuning/","permalink":"http://kamusis.github.io/2024/05/27/MogDB-ASH-Unveiling-the-Active-Session-History-for-Powerful-Database-Performance-Tuning/","excerpt":"","text":"What is ASH?ASH, or Active Session History, is a feature in Oracle databases that records information about active sessions at regular intervals in both the database memory and persistent system tables. Data in memory is cleared after a database restart, but data in the persistent system tables is retained for a longer period. ASH is extremely useful for diagnosing issues when the database encounters problems or performance issues by allowing retrospective analysis to identify the root cause. In MogDB, a similar ASH capability is implemented. ASH Capability in MogDBThe ASH capability in MogDB is divided into two parts: the open-source community version (openGauss) and the enhanced enterprise version. 1. openGauss Community Version:MogDB inherits the ASH capability from openGauss. The database provides two main views: dbe_perf.LOCAL_ACTIVE_SESSION and GS_ASP. The LOCAL_ACTIVE_SESSION view is an in-memory table, while GS_ASP is a persistent table. These views contain sampling information about current active sessions. Key parameters affecting ASH functionality: enable_asp: Set to on or off to enable or disable ASH functionality. Default is on. asp_sample_interval: Specifies the interval between each sample. Default is 1 second. To reduce sampling pressure, this can be set to a longer interval, up to a maximum of 10 seconds. asp_sample_num: Specifies the total number of samples retained in the LOCAL_ACTIVE_SESSION in-memory table. Exceeding this number triggers a flush of in-memory samples to the GS_ASP system table and clears the in-memory table. Default is 100,000 samples. asp_flush_rate: Determines which in-memory samples are flushed to the GS_ASP table. Samples with sampleid % asp_flush_rate == 0 are marked as need_flush_sample=true and are persisted. Default is 10, meaning 1&#x2F;10 of samples are persisted. asp_retention_days: Specifies the retention period for data in the GS_ASP table. Default is 2 days, with a maximum of 7 days. 2. MogDB Enterprise Version:The enterprise version enhances ASH capability, termed “SQL Execution State Observation,” by adding sampling of SQL execution operators. The plan_node_id field is added to views to record the execution operator during each sample, allowing identification of which step in the execution plan is causing performance issues. Key parameters affecting enterprise ASH functionality: resource_track_level: Set to operator to enable operator sampling capability. Default is query, which records only SQL-level sampling. LOCAL_ACTIVE_SESSION ViewThis view records extensive information, including session ID, wait events, and SQL query ID (which can be linked to dbe_perf.statement_history or dbe_perf.statement_complex_runtime to retrieve SQL text and execution plans). Note: The plan_node_id field exists only in the enterprise version. Recording SQL Execution PlansQuerying the execution plans of past or currently executing SQL is a common requirement in database maintenance. In MogDB, the following views record SQL execution plans: dbe_perf.STATEMENT_HISTORY: Records information about completed SQL, including execution plans (query_plan field). dbe_perf.STATEMENT_COMPLEX_RUNTIME: Records information about currently executing SQL, including execution plans (query_plan field). Parameters affecting recording of SQL execution plans: enable_resource_track: Enables or disables resource tracking. Default is on. If set to off, no user SQL execution information, including execution plans, is tracked. resource_track_cost: Sets the minimum execution cost for SQL statements to be tracked. Only SQL with a cost above this value will have its execution plan recorded. Comprehensive Query ExampleThe following query retrieves all information about ongoing SQL executions, including historical samples: 123SELECT las.sample_time, las.application_name, las.unique_query_id, las.event, scr.query, scr.query_planFROM dbe_perf.local_active_session las, dbe_perf.statement_complex_runtime scrWHERE las.thread_id = scr.pid AND scr.pid &lt;&gt; pg_backend_pid(); Example output shows a frequently executed full table scan query, including SQL text, execution plan, and client information, providing valuable data for performance diagnosis.","categories":[],"tags":[{"name":"MogDB","slug":"MogDB","permalink":"http://kamusis.github.io/tags/MogDB/"}]},{"title":"How to move WSL distro in Windows 11 to another drive","slug":"How-to-move-WSL-distro-in-Windows-11-to-another-drive","date":"2024-05-27T06:17:24.000Z","updated":"2024-05-27T09:45:08.699Z","comments":true,"path":"2024/05/27/How-to-move-WSL-distro-in-Windows-11-to-another-drive/","permalink":"http://kamusis.github.io/2024/05/27/How-to-move-WSL-distro-in-Windows-11-to-another-drive/","excerpt":"","text":"Introduction:In the world of development and system administration, Windows Subsystem for Linux (WSL) has become a valuable tool. It allows users to run a Linux distribution alongside their Windows environment, opening up a world of possibilities for developers and administrators. In this article, we’ll guide you through the process of migrating a WSL instance, using a real-world example, step by step. Prerequisites:Before we begin, ensure that you have the following prerequisites in place: Windows 10 or later with WSL installed. An existing WSL instance (in our case, Ubuntu). Sufficient storage space for the migration. Step 1: Create a Target DirectoryTo start the migration process, we need a target directory to store the migrated WSL instance. In PowerShell, use the ‘mkdir’ command to create this directory. In our example, we create a directory named ‘D:\\WSL\\Ubuntu’: 1mkdir -p D:\\WSL\\Ubuntu Step 2: List All Running WSL InstancesBefore we proceed further, let’s list all the running WSL instances. The following command will display a list of all WSL instances, including their state and version: 1wsl -l --all -v Step 3: Export the Source WSL InstanceNow, let’s export the source WSL instance (in our case, ‘Ubuntu’) into a tar file. This step automatically shuts down the WSL instance and restarts it after the export: 1wsl --export Ubuntu D:\\WSL\\Ubuntu.tar Step 4: Unregister the Source WSL InstanceOnce the export is complete, we need to unregister the source WSL instance to avoid conflicts. Use the following command: 1wsl --unregister Ubuntu Step 5: Confirm UnregistrationTo confirm that the source WSL instance has been successfully unregistered, run the following command: 1wsl -l --all -v Step 6: Import into the Target DirectoryNow it’s time to import the previously exported WSL instance into the target directory. In this step, we specify the target directory and version (in our case, version 2): 1wsl --import Ubuntu D:\\WSL\\Ubuntu D:\\WSL\\Ubuntu.tar --version 2 Step 7: Verify the MigrationTo ensure that the migration was successful, list all WSL instances once again: 1wsl -l --all -v Step 8: Access the Migrated WSL InstanceNow, you can access the migrated WSL instance by using the following command: 1wsl -d Ubuntu Conclusion:Migrating WSL instances is a powerful way to manage and organize your development environments. By following these steps, you can seamlessly move your WSL instances to different directories or machines, ensuring flexibility and efficiency in your development workflow. Keep in mind that WSL provides a bridge between Windows and Linux, allowing you to enjoy the best of both worlds. Check the all steps screenshot as below. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# create target directoryPS C:\\Users\\kamus&gt; mkdir -p D:\\WSL\\Ubuntu# List all the wsl runningPS C:\\Users\\kamus&gt; wsl -l --all -v NAME STATE VERSION* Ubuntu Running 2 docker-desktop Stopped 2 docker-desktop-data Stopped 2 # Export source wslPS C:\\Users\\kamus&gt; wsl --export Ubuntu D:\\WSL\\Ubuntu.tar# When doing export, wsl will be shutdown automatically and restart after exportingPS C:\\Users\\kamus&gt; wsl -l --all -v NAME STATE VERSION* Ubuntu Running 2 docker-desktop Stopped 2 docker-desktop-data Stopped 2 # Unregister the source wslPS C:\\Users\\kamus&gt; wsl --unregister Ubuntu正在注销...# Check unregister is successfulPS C:\\Users\\kamus&gt; wsl -l --all -v NAME STATE VERSION* docker-desktop Stopped 2 docker-desktop-data Stopped 2 # Import into the target directoryPS C:\\Users\\kamus&gt; wsl --import Ubuntu D:\\WSL\\Ubuntu D:\\WSL\\Ubuntu.tar --version 2# Check resultsPS C:\\Users\\kamus&gt; wsl -l --all -v NAME STATE VERSION* docker-desktop Stopped 2 Ubuntu Stopped 2 docker-desktop-data Stopped 2PS C:\\Users\\kamus&gt; wsl -d UbuntuWelcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.10.102.1-microsoft-standard-WSL2 x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Fri Jan 5 14:40:25 JST 2024 System load: 0.68 Processes: 8 Usage of /: 2.0% of 250.98GB Users logged in: 0 Memory usage: 4% IPv4 address for eth0: 172.28.208.11 Swap usage: 0%0 updates can be applied immediately.The list of available updates is more than a week old.To check for new updates run: sudo apt updateThis message is shown once a day. To disable it please create the/root/.hushlogin file.root@Kamus-Trident:/mnt/c/Users/kamus# cat /etc/os-releaseNAME=&quot;Ubuntu&quot;VERSION=&quot;20.04.5 LTS (Focal Fossa)&quot;ID=ubuntuID_LIKE=debianPRETTY_NAME=&quot;Ubuntu 20.04.5 LTS&quot;VERSION_ID=&quot;20.04&quot;HOME_URL=&quot;https://www.ubuntu.com/&quot;SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;VERSION_CODENAME=focalUBUNTU_CODENAME=focalroot@Kamus-Trident:/mnt/c/Users/kamus#","categories":[],"tags":[{"name":"WSL","slug":"WSL","permalink":"http://kamusis.github.io/tags/WSL/"},{"name":"Windows","slug":"Windows","permalink":"http://kamusis.github.io/tags/Windows/"}]},{"title":"Unlocking the Power: Key Features of MogDB","slug":"Unlocking-the-Power-Key-Features-of-MogDB","date":"2024-05-27T06:16:11.000Z","updated":"2024-05-27T06:16:59.322Z","comments":true,"path":"2024/05/27/Unlocking-the-Power-Key-Features-of-MogDB/","permalink":"http://kamusis.github.io/2024/05/27/Unlocking-the-Power-Key-Features-of-MogDB/","excerpt":"","text":"Introduction to MogDBMogDB is a cutting-edge distributed relational database management system that offers an array of powerful features designed to meet the needs of modern businesses. With its high performance, availability, maintainability, compatibility, and AI capabilities, MogDB stands out as a top choice for database administrators, developers, and IT professionals. One of the key selling points of MogDB is its ability to deliver exceptional performance. This is achieved through various innovative features such as the Cost-Based Optimizer (CBO) optimizer, which intelligently chooses the most efficient execution plans for queries. Additionally, MogDB utilizes a vectorized engine that processes data in batches instead of row by row, resulting in significant performance improvements. The adaptive compression feature further enhances performance by reducing storage requirements and minimizing I&#x2F;O operations. In terms of availability, MogDB offers robust solutions to ensure uninterrupted access to critical data. It supports master-slave replication, allowing for automatic failover in case of primary node failure. Logical replication enables real-time data synchronization across multiple databases, while physical backup provides reliable data protection. Delayed replay allows for easy recovery from accidental data corruption or deletion. Maintaining a database can be complex and time-consuming. However, MogDB simplifies this process with its advanced maintainability features. The grey upgrade feature allows for seamless upgrades without interrupting service availability. Slow SQL diagnosis helps identify and optimize poorly performing queries, improving overall system efficiency. System KPI diagnosis provides insights into system health and performance metrics, enabling proactive maintenance and troubleshooting. Fault diagnosis helps pinpoint issues quickly and accurately. Compatibility is another area where MogDB excels. It supports various SQL features and ensures compatibility with popular database systems such as Oracle and MySQL. This makes it easier for organizations to migrate their existing applications or leverage their existing SQL knowledge without major modifications. MogDB also boasts impressive AI capabilities that set it apart from traditional databases. The AI4DB feature enables autonomous database operations, automating routine tasks and optimizing performance based on machine learning algorithms. DB4AI allows for database-driven AI, empowering organizations to leverage their data for advanced analytics and machine learning applications. Additionally, the ABO optimizer intelligently adapts query execution plans based on real-time data statistics, further enhancing performance. High Performance FeaturesMogDB is designed to deliver exceptional performance, ensuring that your database operations run smoothly and efficiently. With its cutting-edge features, MogDB offers unparalleled speed and optimization capabilities. One of the key high-performance features of MogDB is the Cost-Based Optimizer (CBO). This optimizer leverages advanced algorithms and statistical models to determine the most efficient execution plan for queries. By analyzing query statistics and data distribution, the CBO can make intelligent decisions on how to execute queries in the most optimal way. This results in faster query processing times and improved overall performance. In addition to the CBO optimizer, MogDB also utilizes a vectorized engine. This engine takes advantage of modern CPU architectures by performing operations on entire vectors of data at once, rather than processing individual elements sequentially. As a result, complex queries that involve large datasets can be executed more quickly and efficiently. Another feature that contributes to MogDB’s high performance is adaptive compression. This feature dynamically adjusts the level of compression applied to data based on its characteristics and usage patterns. By compressing data when it is not actively being accessed or modified, MogDB can reduce storage requirements and improve I&#x2F;O performance. When data needs to be accessed or modified, it is decompressed on-the-fly for seamless operations. Parallel query optimization is yet another powerful feature offered by MogDB. This feature allows queries to be divided into smaller tasks that can be executed simultaneously across multiple cores or nodes in a distributed environment. By leveraging parallelism, MogDB can significantly speed up query processing times for large datasets or complex queries. With these high-performance features combined, MogDB ensures that your database operations are lightning-fast and efficient. Whether you’re running simple CRUD operations or complex analytical queries, you can rely on MogDB to deliver exceptional performance every time. It’s worth noting that while these high-performance features greatly enhance the speed and efficiency of MogDB, they do not compromise on data integrity or reliability. MogDB is built with a strong focus on ACID (Atomicity, Consistency, Isolation, Durability) principles, ensuring that your data remains consistent and reliable even under high-performance workloads. High Availability FeaturesEnsuring high availability is crucial for any database management system, and MogDB excels in this aspect with its robust set of features. Let’s dive into the key high availability features that make MogDB a reliable choice for businesses. Master-slave replication for data redundancy MogDB offers master-slave replication, a powerful feature that enhances data redundancy and fault tolerance. With this feature, changes made to the master node are automatically replicated to one or more slave nodes. In the event of a failure or outage on the master node, one of the slave nodes can seamlessly take over as the new master, ensuring uninterrupted service availability. This replication mechanism not only provides data redundancy but also improves read scalability by allowing read operations to be distributed across multiple nodes. Logical replication for real-time data synchronization In addition to master-slave replication, MogDB supports logical replication, enabling real-time data synchronization between databases. This feature allows specific tables or even subsets of tables to be replicated from one database instance to another. By capturing and propagating changes at the logical level rather than replicating entire physical blocks, logical replication minimizes network traffic and reduces latency. It enables businesses to maintain up-to-date replicas of their databases for reporting purposes or offloading read-intensive workloads without impacting the performance of the primary database. Physical backup for data protection Data protection is paramount in any database system, and MogDB addresses this need through its physical backup feature. With physical backups, administrators can create full copies of their databases at a specific point in time. These backups capture both the schema and data files, ensuring comprehensive recovery options in case of hardware failures, user errors, or other catastrophic events. MogDB’s physical backup mechanism provides flexibility by allowing backups to be stored on different storage devices or even transferred to remote locations for disaster recovery purposes. Delayed replay for data recovery MogDB includes a delayed replay feature that allows administrators to recover data from a specific point in time. This feature is particularly useful in scenarios where accidental data deletions or modifications occur and need to be rolled back. By leveraging the transaction log, MogDB can replay changes up until a certain point, effectively restoring the database to its state prior to the incident. The delayed replay feature provides an additional layer of protection against human errors or malicious activities, ensuring that businesses can quickly recover from data-related incidents. In summary, MogDB offers a comprehensive set of high availability features that guarantee reliability and continuous operation for businesses. The master-slave replication ensures data redundancy and read scalability, while logical replication enables real-time data synchronization for reporting or offloading purposes. Physical backups and delayed replay provide robust data protection mechanisms, allowing administrators to recover from hardware failures or user errors effectively. With these high availability features, MogDB empowers organizations with the confidence that their critical databases will remain accessible and resilient even in the face of unexpected challenges. *[E-A-T]: Expertise, Authoritativeness, Trustworthiness Maintainability FeaturesMaintainability is a crucial aspect of any database management system, and MogDB excels in this area with its array of innovative features. These features are designed to ensure seamless system updates, optimize performance, monitor and analyze system KPIs, and resolve any potential faults. Let’s explore these maintainability features in detail. One of the standout maintainability features of MogDB is the grey upgrade capability. This feature allows for seamless system updates without interrupting ongoing operations. With grey upgrade, administrators can apply patches, upgrades, or even major version changes to MogDB without causing downtime or disrupting user access. This ensures that businesses can keep their databases up-to-date with the latest enhancements and security fixes while minimizing any potential disruptions to their operations. Another essential maintainability feature offered by MogDB is slow SQL diagnosis. Slow SQL queries can significantly impact database performance and user experience. MogDB addresses this issue by providing comprehensive tools for identifying and optimizing slow SQL queries. The system analyzes query execution plans, identifies bottlenecks, and suggests optimizations to improve query performance. By pinpointing problematic queries and optimizing them, administrators can enhance overall database performance and ensure smooth operation. System KPI diagnosis is another vital component of MogDB’s maintainability arsenal. Monitoring key performance indicators (KPIs) is crucial for understanding the health and efficiency of a database system. MogDB provides robust tools for monitoring and analyzing various KPIs such as CPU utilization, memory usage, disk I&#x2F;O, network traffic, and more. Administrators can set up custom alerts based on predefined thresholds to proactively identify any anomalies or potential issues before they impact the system’s performance or availability. In addition to diagnosing slow SQL queries and monitoring KPIs, MogDB also offers fault diagnosis capabilities. When an issue arises within the database system, it is essential to quickly identify the root cause and resolve it efficiently. MogDB provides advanced diagnostic tools that help administrators identify and troubleshoot various types of faults, including hardware failures, network issues, software bugs, or configuration problems. By quickly identifying and resolving faults, administrators can minimize downtime and ensure the continuous availability of their database system. Compatibility FeaturesMogDB offers a wide range of compatibility features that make it a versatile and flexible choice for database administrators, developers, and IT professionals. One of the key compatibility features is its support for various SQL features. With MogDB, you can leverage the full power of SQL and take advantage of advanced querying capabilities to meet your specific business needs. In addition to its support for SQL features, MogDB also provides seamless compatibility with Oracle databases. This compatibility feature allows for easy migration from Oracle to MogDB without any major disruptions or changes to your existing applications. The transition process is smooth and hassle-free, ensuring that you can quickly start benefiting from the high-performance and highly available nature of MogDB. Another compatibility feature offered by MogDB is its support for MySQL databases. This means that you can seamlessly integrate MogDB into your existing MySQL infrastructure without any major modifications. Whether you are running applications that rely on MySQL or have data stored in MySQL databases, MogDB ensures a seamless integration process, allowing you to leverage the advanced capabilities and performance enhancements provided by MogDB. The compatibility features of MogDB not only enable smooth transitions and integrations but also ensure that your existing applications continue to function seamlessly with minimal changes required. This level of compatibility reduces the effort and time required for migration or integration projects, allowing you to focus on other critical aspects of your business. With its comprehensive set of compatibility features, MogDB provides a robust solution that meets the diverse needs of different industries and applications. Whether you are working with complex SQL queries, migrating from Oracle databases, or integrating with MySQL infrastructure, MogDB offers the flexibility and reliability needed to ensure a successful deployment. AI CapabilitiesMogDB stands out among other distributed relational database management systems due to its advanced AI capabilities. These capabilities empower organizations to leverage the power of artificial intelligence for autonomous database operations, database-driven AI, and improved performance through the ABO optimizer. AI4DB for Autonomous Database OperationsWith MogDB’s AI4DB feature, organizations can enhance their operational efficiency by automating various database tasks. This includes automated performance tuning, query optimization, and workload management. The AI algorithms embedded within MogDB continuously monitor the system’s performance metrics and automatically adjust configurations to optimize resource allocation and improve overall database performance. AI4DB also plays a crucial role in self-healing mechanisms. It can detect anomalies or potential issues within the database environment and take proactive measures to resolve them before they impact critical business operations. By leveraging machine learning algorithms, MogDB can identify patterns in historical data and predict potential failures or bottlenecks, allowing administrators to take preventive actions. Furthermore, AI4DB enables intelligent data compression techniques that optimize storage utilization without compromising query performance. By analyzing data access patterns and applying advanced compression algorithms, MogDB reduces storage costs while ensuring fast data retrieval. DB4AI for Database-Driven AIMogDB’s DB4AI feature allows organizations to seamlessly integrate their databases with artificial intelligence applications. This empowers businesses to unlock valuable insights from their vast amounts of structured and unstructured data. By providing native support for popular machine learning frameworks such as TensorFlow and PyTorch, MogDB simplifies the process of training and deploying AI models directly within the database environment. This eliminates the need for complex data pipelines or costly data transfers between different systems. With DB4AI, organizations can leverage the full potential of their databases by performing real-time analytics on large volumes of data. They can train predictive models using historical data stored in MogDB and make accurate predictions based on real-time information ingested into the database. This enables businesses to make data-driven decisions faster and gain a competitive edge in today’s fast-paced market. ABO Optimizer for Improved PerformanceMogDB’s AI capabilities extend to its query optimization engine through the Adaptive Bitwise Optimization (ABO) optimizer. This innovative feature leverages machine learning techniques to intelligently optimize query execution plans based on historical performance data. The ABO optimizer continuously analyzes query patterns, execution statistics, and system resources to identify optimal query plans. By learning from past experiences, it can adaptively adjust execution strategies to improve overall query performance. This results in faster response times and more efficient resource utilization. Furthermore, the ABO optimizer reduces the need for manual tuning by automatically selecting the most appropriate join methods, access paths, and index usage based on the characteristics of each query. This simplifies database administration tasks and allows administrators to focus on higher-level optimizations rather than fine-tuning individual queries. ConclusionThe key features of MogDB make it a powerful and versatile option for database administrators, developers, and IT professionals. Its high performance capabilities, such as the CBO optimizer, vectorized engine, adaptive compression, and parallel query optimization, ensure that users can process large amounts of data quickly and efficiently. This is crucial in today’s fast-paced business environment where time is of the essence. Furthermore, MogDB offers high availability features that guarantee uninterrupted access to critical data. The master-slave replication, logical replication, physical backup, and delayed replay functionalities ensure that data is always accessible even in the event of system failures or disasters. This level of reliability instills confidence in users and provides peace of mind knowing that their data is safe. Maintainability is another key aspect of MogDB. With features like grey upgrade, slow SQL diagnosis, system KPI diagnosis, and fault diagnosis tools, administrators can easily identify and resolve issues within the database system. This streamlines maintenance processes and minimizes downtime for businesses. Compatibility with various SQL features as well as Oracle and MySQL compatibility allows for seamless integration with existing systems and applications. This eliminates the need for extensive modifications or rewrites when migrating from other database management systems to MogDB. In addition to these impressive features, MogDB also offers AI capabilities through AI4DB for autonomous database operations and DB4AI for database-driven AI. These advanced capabilities enable users to leverage artificial intelligence technologies within their databases to enhance performance and gain valuable insights from their data. Overall, MogDB stands out as a highly performant, highly available, easy-to-use distributed relational database management system with a wide range of features tailored to meet the needs of modern businesses. Its compatibility with existing systems and applications combined with its AI capabilities make it an attractive choice for organizations across industries. Whether you are a database administrator looking for improved performance or a developer seeking seamless integration options, MogDB has you covered. Trust in MogDB to unlock the power of your data.","categories":[],"tags":[{"name":"MogDB","slug":"MogDB","permalink":"http://kamusis.github.io/tags/MogDB/"}]},{"title":"Advanced topic - using MTK to migrate Oracle sample schema to MogDB","slug":"Advanced-topic-using-MTK-to-migrate-Oracle-sample-schema-to-MogDB","date":"2024-05-27T05:26:18.000Z","updated":"2024-05-27T09:44:57.727Z","comments":true,"path":"2024/05/27/Advanced-topic-using-MTK-to-migrate-Oracle-sample-schema-to-MogDB/","permalink":"http://kamusis.github.io/2024/05/27/Advanced-topic-using-MTK-to-migrate-Oracle-sample-schema-to-MogDB/","excerpt":"","text":"Get the latest version MTK.12wget https://cdn-mogdb.enmotech.com/mtk/v2.6.3/mtk_2.6.3_linux_amd64.tar.gztar -xvf mtk_2.6.3_linux_amd64.tar.gz Gernerate MTK trial license onlineThe trial license lasts for 1 month, every mail address can only gernerate one license, except the mail address domain is “enmotech.com”, using “enmotech.com” mail can repeatly genarate license. So if the clients want to try MTK more after 1 month, should contact the sales or pre-sales from Enmotech, to ask for another 1 month license. 1234567[kamus@altlinux10 mtk_2.6.3_linux_amd64]$ ./mtk license genLicense File Not Found (default license.json)The License code is invalid, start applying✔ Email: kamus@enmotech.com█Start applying for email kamus@enmotech.com authorization.Start parsing the interface to return data.Successful application for authorization. Please check the mail and save it as license.json. When get the mail, upload the attached license.json file to the MTK directory. Use mtk -v to check the license validation. 1234567891011121314151617181920212223242526272829[kamus@altlinux10 mtk_2.6.3_linux_amd64]$ ./mtk -vUsing license file: /home/kamus/mogdb-tools/mtk_2.6.3_linux_amd64/license.jsonName: kamus@enmotech.comExpiry: 2022-10-24 12:08:58.751194162 +0800 +0800License key verified!License checks OK!MMMMMMMM MMMMMMMMTTTTTTTTTTTTTTTTTTTTTTTKKKKKKKKK KKKKKKKM:::::::M M:::::::MT:::::::::::::::::::::TK:::::::K K:::::KM::::::::M M::::::::MT:::::::::::::::::::::TK:::::::K K:::::KM:::::::::M M:::::::::MT:::::TT:::::::TT:::::TK:::::::K K::::::KM::::::::::M M::::::::::MTTTTTT T:::::T TTTTTTKK::::::K K:::::KKKM:::::::::::M M:::::::::::M T:::::T K:::::K K:::::KM:::::::M::::M M::::M:::::::M T:::::T K::::::K:::::KM::::::M M::::M M::::M M::::::M T:::::T K:::::::::::KM::::::M M::::M::::M M::::::M T:::::T K:::::::::::KM::::::M M:::::::M M::::::M T:::::T K::::::K:::::KM::::::M M:::::M M::::::M T:::::T K:::::K K:::::KM::::::M MMMMM M::::::M T:::::T KK::::::K K:::::KKKM::::::M M::::::M TT:::::::TT K:::::::K K::::::KM::::::M M::::::M T:::::::::T K:::::::K K:::::KM::::::M M::::::M T:::::::::T K:::::::K K:::::KMMMMMMMM MMMMMMMM TTTTTTTTTTT KKKKKKKKK KKKKKKKRelease version: v2.6.3Git Commit hash: da0ed8eeGit Commit Date: 2022-09-22T01:17:49ZGit Tag : v2.6.3Build timestamp: 20220922011907 Install Oracle instant clientMTK needs Oracle instant client to migrate Oracle objects to MogDB, in this tutorial, we will download Oracle Instant Client for Linux x86-64 Basic Package. Unzip the downloaded file, set the proper LD_LIBRARY_PATH parameter. 1export LD_LIBRARY_PATH=/home/kamus/instantclient_21_7:$LD_LIBRARY_PATH We will migrate a sample schema “customer_orders” to MogDB in this tutorial. the db-sample-schemas scipts for Oracle can be downloaded from github. Initialize migration project1./mtk init-project -s oracle -t mogdb -n ora2mogdb Modify MTK configuration fileModify the example MTK confiuration file stored in project_name_dir&#x2F;config directory, check MTK documentation for the details of every parameter. The essenssial config sections for MTK is source, target, object . source section: is the connection defination for source database, MTK needs to query Oracle database dictionary to get DDL, so typically we should use DBA user, the default system user will be OK. target section: is the connection defination for target database. object section: for migrating all the objects in one schema, we just need to put schema name in schemas section. The mtk.json config file will looks like: 1234567891011121314151617181920212223242526272829303132333435363738&#123; &quot;source&quot;: &#123; &quot;type&quot;: &quot;oracle&quot;, &quot;connect&quot;: &#123; &quot;version&quot;: &quot;&quot;, &quot;host&quot;: &quot;119.3.182.31&quot;, &quot;user&quot;: &quot;system&quot;, &quot;port&quot;: 15221, &quot;password&quot;: &quot;oracle&quot;, &quot;dbName&quot;: &quot;ORACLE21C&quot;, &quot;charset&quot;: &quot;&quot;, &quot;clientCharset&quot;: &quot;&quot; &#125; &#125;, &quot;target&quot;: &#123; &quot;type&quot;: &quot;mogdb&quot;, &quot;connect&quot;: &#123; &quot;version&quot;: &quot;&quot;, &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;user&quot;: &quot;co&quot;, &quot;port&quot;: 26000, &quot;password&quot;: &quot;Enmo@123&quot;, &quot;dbName&quot;: &quot;postgres&quot;, &quot;charset&quot;: &quot;&quot;, &quot;clientCharset&quot;: &quot;&quot; &#125; &#125;, &quot;object&quot;: &#123; &quot;tables&quot;: [], &quot;schemas&quot;: [&quot;co&quot;], &quot;excludeTable&quot;: &#123; &#125;, &quot;tableSplit&quot;: &#123; &#125; &#125;, &quot;dataOnly&quot;: false, &quot;schemaOnly&quot;: false&#125; We are planning to migrate all the objects in “CO” schema from Oracle database to the same user in MogDB, for testing purpose, we will not create a new database in MogDB, we create a new user “co” in default database postgres. 1234567[omm@altlinux10 ~]$ gsql -d postgres -p 26000 -rgsql ((MogDB 3.0.2 build 9bc79be5) compiled at 2022-09-18 00:37:49 commit 0 last mr )Non-SSL connection (SSL connection is recommended when requiring high-security)Type &quot;help&quot; for help.MogDB=# create user co identified by &quot;Enmo@123&quot;;CREATE ROLE Start migrationNow, we can start migration. 1./mtk -c ora2mogdb/config/mtk.json Check migration reportMigration result report will be generated in project report directory, both in pure text format and HTML format, till now the HTML report is in Chinese, so I put the text format result into this tutorial. 123456789101112131415161718192021222324252627-----------------------ObjectName Type Summary-----------------------+------------------+-------------------+-------------------+--------+-----------+-------------+-------------+-------------+--------------------|-------------+| Type | StartTime | EndTime | Status | Total Num | Success Num | Warring Num | Failed Num |Failed(Invalid) Num | Time |+------------------+-------------------+-------------------+--------+-----------+-------------+-------------+-------------+--------------------|-------------+|Schema |2022-09-24 15:12:36|2022-09-24 15:12:36|finish |1 |1 |0 |0 |0 |282 ms ｜|Sequence |2022-09-24 15:12:36|2022-09-24 15:12:36|finish |0 |0 |0 |0 |0 |210 ms ｜|ObjectType |2022-09-24 15:12:36|2022-09-24 15:12:36|finish |0 |0 |0 |0 |0 |356 ms ｜|Queue |2022-09-24 15:12:36|2022-09-24 15:12:37|finish |0 |0 |0 |0 |0 |177 ms ｜|Table |2022-09-24 15:12:37|2022-09-24 15:12:47|finish |7 |7 |0 |0 |0 |9 s 952 ms ｜|TableData |2022-09-24 15:12:47|2022-09-24 15:12:53|finish |7 |7 |0 |0 |0 |6 s 743 ms ｜|Index |2022-09-24 15:12:53|2022-09-24 15:12:53|finish |7 |7 |0 |0 |0 |1 ms ｜|Constraint |2022-09-24 15:12:53|2022-09-24 15:12:53|finish |24 |23 |0 |1 |0 |51 ms ｜|DBLink |2022-09-24 15:12:53|2022-09-24 15:12:53|finish |0 |0 |0 |0 |0 |67 ms ｜|View |2022-09-24 15:12:53|2022-09-24 15:12:54|finish |4 |2 |0 |2 |0 |723 ms ｜|MaterializedView |2022-09-24 15:12:54|2022-09-24 15:12:54|finish |0 |0 |0 |0 |0 |138 ms ｜|Function |2022-09-24 15:12:54|2022-09-24 15:12:54|finish |0 |0 |0 |0 |0 |113 ms ｜|Procedure |2022-09-24 15:12:54|2022-09-24 15:12:55|finish |0 |0 |0 |0 |0 |109 ms ｜|Package |2022-09-24 15:12:55|2022-09-24 15:12:55|finish |0 |0 |0 |0 |0 |77 ms ｜|Trigger |2022-09-24 15:12:55|2022-09-24 15:12:55|finish |0 |0 |0 |0 |0 |404 ms ｜|Synonym |2022-09-24 15:12:55|2022-09-24 15:12:55|finish |0 |0 |0 |0 |0 |74 ms ｜|TableDataCom |2022-09-24 15:12:55|2022-09-24 15:12:56|finish |7 |7 |0 |0 |0 |810 ms ｜|AlterSequence |2022-09-24 15:12:56|2022-09-24 15:12:56|finish |0 |0 |0 |0 |0 |71 ms ｜|CollStatistics |2022-09-24 15:12:56|2022-09-24 15:12:56|finish |7 |7 |0 |0 |0 |29 ms ｜+------------------+-------------------+-------------------+--------+-----------+-------------+-------------+-------------+--------------------|-------------+ We can see all the tables and table data are successfully migrated to MogDB without any error, but for constraint, there is 1 failed, and for view, there are 2 failed. The failed constraint is a JSON check constraint. MogDB dosn’t has this type of constraint. The failed views are about grouping_id function and json_table function which MogDB not implemented yet. SQL ERROR pq: function grouping_id(character varying, character varying) does not exist pq: syntax error at or near “columns” Run the sample queries1234567891011121314/* 5 products with the highest revenue With their corresponding order rank */select p.product_name, count(*) number_of_orders, sum ( oi.quantity * oi.unit_price ) total_value, rank () over ( order by count(*) desc ) order_count_rankfrom products pjoin order_items oion p.product_id = oi.product_idgroup by p.product_nameorder by sum ( oi.quantity * oi.unit_price ) descfetch first 5 rows only; 1234567891011121314151617181920MogDB=&gt; select p.product_name,MogDB-&gt; count(*) number_of_orders,MogDB-&gt; sum ( oi.quantity * oi.unit_price ) total_value,MogDB-&gt; rank () over (MogDB(&gt; order by sum ( oi.quantity * oi.unit_price ) descMogDB(&gt; ) revenue_rankMogDB-&gt; from products pMogDB-&gt; join order_items oiMogDB-&gt; on p.product_id = oi.product_idMogDB-&gt; group by p.product_nameMogDB-&gt; order by count(*) descMogDB-&gt; fetch first 5 rows only; product_name | number_of_orders | total_value | revenue_rank-----------------------+------------------+-------------+-------------- Girl&#x27;s Trousers (Red) | 148 | 15794.76 | 1 Boy&#x27;s Hoodie (Grey) | 100 | 3754.08 | 35 Men&#x27;s Pyjamas (Blue) | 100 | 3274.61 | 36 Men&#x27;s Coat (Red) | 98 | 4230.30 | 31 Boy&#x27;s Socks (White) | 98 | 3081.12 | 38(5 rows) ConclusionMigrating tables&#x2F;table data&#x2F;indexes from Oracle to MogDB normally has no issue, but for views&#x2F;procedures&#x2F;functions&#x2F;packages, we still have to made some modification to the source code.","categories":[],"tags":[{"name":"MogDB","slug":"MogDB","permalink":"http://kamusis.github.io/tags/MogDB/"},{"name":"Oracle","slug":"Oracle","permalink":"http://kamusis.github.io/tags/Oracle/"},{"name":"Database Migration","slug":"Database-Migration","permalink":"http://kamusis.github.io/tags/Database-Migration/"}]}],"categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://kamusis.github.io/tags/Hexo/"},{"name":"Github Pages","slug":"Github-Pages","permalink":"http://kamusis.github.io/tags/Github-Pages/"},{"name":"WSL","slug":"WSL","permalink":"http://kamusis.github.io/tags/WSL/"},{"name":"MogDB","slug":"MogDB","permalink":"http://kamusis.github.io/tags/MogDB/"},{"name":"Windows","slug":"Windows","permalink":"http://kamusis.github.io/tags/Windows/"},{"name":"Oracle","slug":"Oracle","permalink":"http://kamusis.github.io/tags/Oracle/"},{"name":"Database Migration","slug":"Database-Migration","permalink":"http://kamusis.github.io/tags/Database-Migration/"}]}